/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'

//As the java souce has Chinese character, need to specify that in the compiling option
//javac -encoding UTF-8
//apply plugin: 'java'
compileJava.options.encoding = 'UTF-8' 

//apply plugin: 'java'
//sourceCompatibility = 1.9
//targetCompatibility = 1.9

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    jcenter()
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    // api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    // implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // Use to parse yaml configuration files
    implementation 'org.yaml:snakeyaml:1.23'
    // DB driver
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.3.0'

	//extraLibs for packaging to the jar as these libs are used at run time
    extraLibs 'org.yaml:snakeyaml:1.23'
    extraLibs 'org.mariadb.jdbc:mariadb-java-client:2.3.0'
}

//to build the jar file
//C:\Users\Edward\repos\OrderMaster\gom>gradlew.bat jar
//The gom.jar files is writtent to build/libs after 'gradlew.bat jar' runs.
jar {
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }

    //manifest {
    //    attributes 'Main-Class': 'com.orderfoodnow.pos.backend.Server'
    //}
    //if the above maifest is specified, can start the server this way, but it cannot fine the jdbc lib
    //java -jar build\libs\gomJars.jar
    //further more, the conf directory is needed. So use the orderMasterZip task below to generate the zip file and install the zip instead.
}

tasks.register("resourcesCopy") {
    description = 'Copy files into the buildDir'
    doLast {
        copy {
            from ("$projectDir/src/test/resources/conf")
            into ("$buildDir/gom/conf")
        }

        copy {
            from ("$projectDir/src/main/scripts")
            into ("$buildDir/gom/scripts")
        }

        copy {
            from ("$projectDir/README.md")
            into("$buildDir/gom/logs")
        }
    }
}

// Don't know if possible to pass in the relase value from the command line.
// For now, just change the release variable where zip file name and gom directory are using it
def release = "gom19.6"
def zipFileName = "$release" + ".zip"
def installDir = "C:/gom"
//for PC with samba server running in linux and Windows as samba client.
def installDirY = "Y:/gom"
def installDirZ = "Z:/gom"

// By default, Buildship only shows the public tasks.
// Public tasks are defined as those which belong to a non-null group.
// To see the private tasks, click on the little arrow in the upper right-hand corner of the tasks View
// and adjust the filter to include ‘non-public’ task
//https://discuss.gradle.org/t/custom-tasks-are-not-being-included-in-the-gradle-tasks-view/12760
//Invoking these tasks in the Windows cmd window.
// cd C:\github\gom\eclipse\gom
// gradlew.bat gomZip

task gomZip(type: Zip) {
    description = 'Build a zip file for installation'
    dependsOn('resourcesCopy')

    from (jar.outputs.files) {
        into("$release")
    }

    from("$buildDir/gom") {
        into("$release")
    }

   archiveName "$zipFileName"
   destinationDir(file('build'))
}

task unzip(type: Copy) {
    description = "Install gomZip file on $installDir"
    dependsOn(gomZip)
    def zipFile = file("$buildDir/$zipFileName")
    def outputDir = file("$installDir")

    from zipTree(zipFile)
    into outputDir
}

task unzipY(type: Copy) {
    description = "Install gomZip file on $installDirY"
    dependsOn(gomZip)
    def zipFile = file("$buildDir/$zipFileName")
    def outputDir = file("$installDirY")

    from zipTree(zipFile)
    into outputDir
}

task unzipZ(type: Copy) {
    description = "Install gomZip file on $installDirZ"
    dependsOn(gomZip)
    def zipFile = file("$buildDir/$zipFileName")
    def outputDir = file("$installDirZ")

    from zipTree(zipFile)
    into outputDir
}
// Once the gom.zip file is built, take this, use unzip to install this file anywhere.
// Start Server first, then Client as follow in the directory where it was installed.
//java -cp gom.jar com.orderfoodnow.pos.backend.Server
//java -cp gom.jar com.orderfoodnow.pos.frontend.Client [remote server IP address]

//Should be able to run programs in the com.orderfoodnow.pos.tool directory

//this task can be invoked with the follow command line terminal
//C:\Users\Edward\repos\OrderMaster\gom>gradlew.bat sSP
task sourceSetProperties doLast {
    description = 'Print some env var for debugging'
    println "projectDir = $projectDir"
    println "======================================="
    println "buildDir = $buildDir"
    println "======================================="

    sourceSets {
    main {
    println "java.srcDirs = ${java.srcDirs}"
    println "======================================="
    println "resources.srcDirs = ${resources.srcDirs}"
    println "======================================="
    println "java.files = ${java.files.name}"
    println "======================================="
    //has same file list as ${java.files.name}
    //println "allJava.files = ${allJava.files.name}"
    //println "======================================="
    println "resources.files = ${resources.files.name}"
    println "======================================="
    println "allSource.files = ${allSource.files.name}"
    println "======================================="
    println "output.resourcesDir = ${output.resourcesDir}"
    println "======================================="
    println "output.files = ${output.files}"
    println "======================================="
    rintln "jar.outputs.files = ${jar.outputs.files}"
    }
}
}